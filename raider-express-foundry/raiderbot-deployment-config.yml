# RaiderBot Omnipotent AI Configuration
# Complete deployment configuration for Cursor execution

project_name: "raider-express-foundry"
version: "1.0.0"
description: "RaiderBot Omnipotent AI Assistant - Jack of All Trades"

# ============================================================================
# FOUNDRY WORKSPACE CONFIGURATION
# ============================================================================
foundry:
  workspace:
    name: "raider-express-operations"
    description: "Raider Express Transportation Management with RaiderBot AI"
    
  datasets:
    # Core operational datasets
    drivers:
      rid: "ri.foundry.main.dataset.raider_drivers"
      schema: "ontology/objects/driver.py"
      transforms: "transforms/snowflake_ingestion.py::sync_driver_data"
      
    vehicles:
      rid: "ri.foundry.main.dataset.raider_vehicles" 
      schema: "ontology/objects/vehicle.py"
      transforms: "transforms/snowflake_ingestion.py::sync_vehicle_data"
      
    deliveries:
      rid: "ri.foundry.main.dataset.raider_deliveries"
      schema: "ontology/objects/delivery.py" 
      transforms: "transforms/snowflake_ingestion.py::sync_delivery_data"
      
    routes:
      rid: "ri.foundry.main.dataset.raider_routes"
      schema: "ontology/objects/route.py"
      transforms: "transforms/snowflake_ingestion.py::calculate_route_data"
      
    safety_incidents:
      rid: "ri.foundry.main.dataset.safety_incidents"
      schema: "ontology/objects/safety_incident.py"
      
    customers:
      rid: "ri.foundry.main.dataset.customers"
      schema: "ontology/objects/customer.py"
      
    kpi_dashboard:
      rid: "ri.foundry.main.dataset.raider_kpi_dashboard"
      transforms: "transforms/kpi_calculations.py::calculate_kpi_dashboard"

  functions:
    route_optimization:
      file: "functions/route_optimization.py"
      class: "RouteOptimizationFunction"
      schedule: "on-demand"
      
    safety_scoring:
      file: "functions/safety_scoring.py" 
      class: "SafetyScoringFunction"
      schedule: "hourly"
      
    document_learning:
      file: "functions/document_learning.py"
      class: "DocumentLearningFunction" 
      schedule: "on-demand"
      
    ai_chat_handler:
      file: "functions/ai_chat_handler.py"
      class: "RaiderBotChatFunction"
      schedule: "on-demand"
      
    workflow_automation:
      file: "functions/workflow_automation.py"
      class: "WorkflowAutomationFunction"
      schedule: "event-driven"

# ============================================================================
# RAIDERBOT AI CONFIGURATION
# ============================================================================
raiderbot:
  name: "RaiderBot"
  description: "German Shepherd AI Assistant for Raider Express"
  version: "1.0.0"
  
  # Core AI Configuration
  ai_model:
    provider: "foundry-llm"
    model: "gpt-4-turbo"
    temperature: 0.7
    max_tokens: 2000
    context_window: 128000
    
  # German Shepherd Personality Configuration
  personality:
    base_prompt: |
      You are RaiderBot, an AI assistant for Raider Express, embodying a German Shepherd's spirit.
      
      üêï CORE PERSONALITY:
      - Loyal, intelligent, protective, and safety-focused
      - Enthusiastic helper with "Woof!" expressions
      - Bilingual (English/Spanish) - respond in user's language
      - Professional but warm, like a trusted working dog
      
      üõ°Ô∏è SAFETY-FIRST VALUES:
      - All trucks governed at 60mph - NEVER suggest speeding
      - Temperature compliance critical for refrigerated loads
      - Driver safety always comes first
      - Emphasize compliance and best practices
      
      üè¢ BUSINESS CONTEXT:
      - Raider Express: Long-haul refrigerated trucking, Fort Worth, TX
      - Professional CDL drivers with reefer trucks
      - Focus on on-time delivery and cold chain integrity
      
      üß† CAPABILITIES:
      - Access ALL operational data in real-time
      - Generate dashboards, reports, and visualizations ON DEMAND
      - Create React components and code solutions
      - Optimize routes, analyze performance, predict issues
      - Learn from documents, images, audio, video
      - Provide actionable insights with data backing
      
      üìä DASHBOARD GENERATION:
      When asked to create dashboards or reports, you can:
      - Write React/TypeScript components with live Foundry data
      - Generate charts using recharts, d3, or other libraries  
      - Create executive summaries with KPI visualizations
      - Build custom interfaces for specific use cases
      - Export data to Excel/PDF when requested
      
      Always be helpful, data-driven, and maintain your German Shepherd enthusiasm!
    
    language_detection:
      enabled: true
      supported_languages: ["en", "es"]
      default_language: "en"
    
    response_style:
      use_emojis: true
      include_dog_references: true
      format_with_markdown: true
      provide_actionable_insights: true

  # Data Access Configuration  
  data_access:
    permissions: "read-write-execute"
    datasets: "all"
    functions: "all"
    
    real_time_access:
      - "raider_drivers"
      - "raider_vehicles" 
      - "raider_deliveries"
      - "raider_routes"
      - "raider_kpi_dashboard"
      - "safety_incidents"
      - "customers"
    
    query_capabilities:
      - "sql_generation"
      - "data_analysis" 
      - "statistical_calculations"
      - "trend_analysis"
      - "predictive_modeling"

  # Code Generation Configuration
  code_generation:
    enabled: true
    languages: ["python", "typescript", "javascript", "sql"]
    frameworks: ["react", "foundry-transforms", "foundry-functions"]
    
    dashboard_generation:
      enabled: true
      default_framework: "react-typescript"
      chart_library: "recharts"
      ui_library: "@palantir/blueprint"
      
    component_templates:
      executive_dashboard: "templates/executive-dashboard.tsx"
      kpi_cards: "templates/kpi-cards.tsx" 
      safety_dashboard: "templates/safety-dashboard.tsx"
      driver_performance: "templates/driver-performance.tsx"

  # Multimodal Capabilities
  multimodal:
    document_processing: true
    image_analysis: true
    video_processing: true
    audio_transcription: true
    
    learning_storage:
      knowledge_base: "ri.foundry.main.dataset.raiderbot_knowledge"
      conversation_history: "ri.foundry.main.dataset.raiderbot_conversations"

# ============================================================================
# CHAT INTERFACE CONFIGURATION
# ============================================================================
chat_interface:
  frontend:
    framework: "react-typescript"
    ui_library: "@palantir/blueprint"
    file_path: "applications/chat/src/RaiderBotChat.tsx"
    
  backend_integration:
    foundry_function: "ai_chat_handler"
    websocket_enabled: true
    real_time_updates: true
    
  features:
    file_upload: true
    voice_input: true
    multi_language: true
    conversation_memory: true
    proactive_suggestions: true

# ============================================================================
# DASHBOARD GENERATION TEMPLATES
# ============================================================================
dashboard_templates:
  executive_dashboard:
    name: "Executive Operations Dashboard"
    description: "High-level KPIs and business metrics"
    data_sources: ["kpi_dashboard", "deliveries", "drivers", "vehicles"]
    components:
      - "DeliveryPerformanceCard"
      - "SafetyMetricsCard" 
      - "FleetUtilizationChart"
      - "RevenueAnalysisChart"
      - "AlertsSummary"
    
  safety_dashboard:
    name: "Safety & Compliance Dashboard" 
    description: "Driver safety scores and incident tracking"
    data_sources: ["safety_incidents", "drivers", "routes"]
    components:
      - "SafetyScoreLeaderboard"
      - "IncidentTrendChart"
      - "ComplianceStatusGrid"
      - "SpeedViolationAlerts"
    
  operations_dashboard:
    name: "Daily Operations Dashboard"
    description: "Real-time operational metrics"
    data_sources: ["deliveries", "routes", "drivers", "vehicles"]  
    components:
      - "LiveDeliveryMap"
      - "DriverStatusGrid"
      - "RouteOptimizationSavings"
      - "CustomerSatisfactionTrend"

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================
deployment:
  environment: "production"
  
  foundry_deployment:
    transforms:
      - deploy: "transforms/snowflake_ingestion.py"
        schedule: "*/15 minutes"
      - deploy: "transforms/kpi_calculations.py"
        schedule: "*/5 minutes"
    
    functions:
      - deploy: "functions/route_optimization.py"
        trigger: "on-demand"
      - deploy: "functions/safety_scoring.py" 
        trigger: "hourly"
      - deploy: "functions/ai_chat_handler.py"
        trigger: "on-demand"
      - deploy: "functions/document_learning.py"
        trigger: "on-demand"
    
    applications:
      - name: "raiderbot-chat"
        path: "applications/chat"
        type: "react-application"
        port: 3000
      - name: "raiderbot-mobile"
        path: "applications/mobile" 
        type: "mobile-application"
        platforms: ["ios", "android"]

  monitoring:
    health_checks: true
    performance_monitoring: true
    error_tracking: true
    usage_analytics: true

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================
testing:
  test_scenarios:
    basic_chat:
      - "Hello RaiderBot, how are our deliveries today?"
      - "¬øC√≥mo est√°n nuestros conductores hoy?" 
      - "Show me safety metrics"
      
    dashboard_generation:
      - "Build me an executive dashboard for today's operations"
      - "Create a safety dashboard showing this week's incidents"
      - "Generate a driver performance leaderboard"
      - "Make a route optimization savings report"
      
    data_analysis:
      - "Which drivers need safety training?"
      - "What routes are most efficient?"
      - "Analyze customer satisfaction trends"
      - "Predict maintenance needs for next week"
    
    multimodal:
      - "Analyze this delivery receipt image"
      - "Learn from this safety training video"  
      - "Process this customer complaint email"

# ============================================================================
# CURSOR EXECUTION COMMANDS
# ============================================================================
cursor_commands:
  setup_workspace: |
    # Create Foundry workspace
    foundry workspace create raider-express-operations
    foundry workspace set-default raider-express-operations
    
  deploy_ontology: |
    # Deploy ontology objects
    foundry ontology deploy ontology/objects/
    foundry ontology deploy ontology/link_types/
    
  deploy_transforms: |
    # Deploy data transforms
    foundry transforms deploy transforms/snowflake_ingestion.py
    foundry transforms deploy transforms/kpi_calculations.py
    
  deploy_functions: |
    # Deploy AI functions  
    foundry functions deploy functions/route_optimization.py
    foundry functions deploy functions/safety_scoring.py
    foundry functions deploy functions/ai_chat_handler.py
    foundry functions deploy functions/document_learning.py
    
  configure_bot: |
    # Configure RaiderBot instance
    foundry ai create-bot raiderbot \
      --model gpt-4-turbo \
      --personality-file raiderbot.personality \
      --data-access all \
      --code-generation enabled \
      --multimodal enabled
    
  deploy_chat: |
    # Deploy chat interface
    cd applications/chat
    npm install
    npm run build
    foundry apps deploy raiderbot-chat
    
  test_bot: |
    # Test RaiderBot functionality
    foundry ai test raiderbot --scenario basic_chat
    foundry ai test raiderbot --scenario dashboard_generation
    foundry ai test raiderbot --scenario data_analysis

# ============================================================================
# SUCCESS CRITERIA
# ============================================================================
success_criteria:
  chat_working: "RaiderBot responds with German Shepherd personality"
  data_access: "Bot can query all datasets and return current data"
  dashboard_generation: "Bot creates working React dashboards on demand"
  multimodal: "Bot processes uploaded documents and images"
  bilingual: "Bot responds appropriately in English and Spanish"
  safety_focus: "Bot maintains 60mph safety-first messaging"
  
expected_capabilities:
  - "Generate executive dashboard in <30 seconds"
  - "Answer complex operational queries with data"
  - "Create custom visualizations on request" 
  - "Process and learn from uploaded documents"
  - "Provide actionable recommendations"
  - "Maintain German Shepherd personality throughout"